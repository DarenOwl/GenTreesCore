// <auto-generated />
using System;
using GenTreesCore.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GenTreesCore.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200711201959_TestGenTree")]
    partial class TestGenTree
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GenTreesCore.Entities.CustomPersonDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TemplateId");

                    b.ToTable("CustomPersonDescription");
                });

            modelBuilder.Entity("GenTreesCore.Entities.CustomPersonDescriptionTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GenTreeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenTreeId");

                    b.ToTable("CustomPersonDescriptionTemplate");
                });

            modelBuilder.Entity("GenTreesCore.Entities.GenTree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DateTimeSettingsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateTimeSettingsId");

                    b.HasIndex("OwnerId");

                    b.ToTable("GenTrees");
                });

            modelBuilder.Entity("GenTreesCore.Entities.GenTreeDateTimeSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Eras")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("YearMonthCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("GenTreeDateTimeSetting");
                });

            modelBuilder.Entity("GenTreesCore.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeathDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenTreeId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenTreeId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("GenTreesCore.Entities.Relation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RelationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TargetPersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TargetPersonId");

                    b.ToTable("Relation");

                    b.HasDiscriminator<string>("RelationType").HasValue("Relation");
                });

            modelBuilder.Entity("GenTreesCore.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GenTreesCore.Entities.ChildRelation", b =>
                {
                    b.HasBaseType("GenTreesCore.Entities.Relation");

                    b.Property<int>("RealtionRate")
                        .HasColumnType("int");

                    b.Property<int?>("SecondParentId")
                        .HasColumnType("int");

                    b.HasIndex("SecondParentId");

                    b.HasDiscriminator().HasValue("ChildRelation");
                });

            modelBuilder.Entity("GenTreesCore.Entities.SpouseRelation", b =>
                {
                    b.HasBaseType("GenTreesCore.Entities.Relation");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("SpouseRelation");
                });

            modelBuilder.Entity("GenTreesCore.Entities.CustomPersonDescription", b =>
                {
                    b.HasOne("GenTreesCore.Entities.Person", null)
                        .WithMany("CustomDescriptions")
                        .HasForeignKey("PersonId");

                    b.HasOne("GenTreesCore.Entities.CustomPersonDescriptionTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("GenTreesCore.Entities.CustomPersonDescriptionTemplate", b =>
                {
                    b.HasOne("GenTreesCore.Entities.GenTree", null)
                        .WithMany("CustomPersonDescriptionTemplates")
                        .HasForeignKey("GenTreeId");
                });

            modelBuilder.Entity("GenTreesCore.Entities.GenTree", b =>
                {
                    b.HasOne("GenTreesCore.Entities.GenTreeDateTimeSetting", "DateTimeSettings")
                        .WithMany()
                        .HasForeignKey("DateTimeSettingsId");

                    b.HasOne("GenTreesCore.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("GenTreesCore.Entities.Person", b =>
                {
                    b.HasOne("GenTreesCore.Entities.GenTree", null)
                        .WithMany("Persons")
                        .HasForeignKey("GenTreeId");
                });

            modelBuilder.Entity("GenTreesCore.Entities.Relation", b =>
                {
                    b.HasOne("GenTreesCore.Entities.Person", "TargetPerson")
                        .WithMany("Relations")
                        .HasForeignKey("TargetPersonId");
                });

            modelBuilder.Entity("GenTreesCore.Entities.ChildRelation", b =>
                {
                    b.HasOne("GenTreesCore.Entities.Person", "SecondParent")
                        .WithMany()
                        .HasForeignKey("SecondParentId");
                });
#pragma warning restore 612, 618
        }
    }
}
